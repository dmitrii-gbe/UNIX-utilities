The origins of Unix date back to the mid-1960s when the Massachusetts Institute of Technology, Bell Labs, and General Electric were developing Multics, a time-sharing operating system for the GE 645 mainframe computer.[16] Multics featured several innovations, but also presented severe problems. Frustrated by the size and complexity of Multics, but not by its goals, individual researchers at Bell Labs started withdrawing from the project. The last to leave were Ken Thompson, Dennis Ritchie, Douglas McIlroy, and Joe Ossanna,[12] who decided to reimplement their experiences in a new project of smaller scale. This new operating system was initially without organizational backing, and also without a name.
The new operating system was a single-tasking system.[12] In 1970, the group coined the name Unics for Uniplexed Information and Computing Service as a pun on Multics, which stood for Multiplexed Information and Computer Services. Brian Kernighan takes credit for the idea, but adds that "no one can remember" the origin of the final spelling Unix.[17] Dennis Ritchie,[12] Doug McIlroy,[1] and Peter G. Neumann[18] also credit Kernighan.
The operating system was originally written in assembly language, but in 1973, Version 4 Unix was rewritten in C.[12] Version 4 Unix, however, still had much PDP-11 specific code, and was not suitable for porting. The first port to another platform was a port of Version 6, made four years later (1977) at the University of Wollongong for the Interdata 7/32,[19] followed by a Bell Labs port of Version 7 to the Interdata 8/32 during 1977 and 1978.[20]
Bell Labs produced several versions of Unix that are collectively referred to as Research Unix. In 1975, the first source license for UNIX was sold to Donald B. Gillies at the University of Illinois Urbana-Champaign (UIUC) Department of Computer Science.[21]
During the late 1970s and early 1980s, the influence of Unix in academic circles led to large-scale adoption of Unix (BSD and System V) by commercial startups, which in turn led to Unix fragmenting into multiple, similar - but often slightly and mutually incompatible - systems including DYNIX, HP-UX, SunOS/Solaris, AIX, and Xenix. In the late 1980s, AT&T Unix System Laboratories and Sun Microsystems developed System V Release 4 (SVR4), which was subsequently adopted by many commercial Unix vendors.
In the 1990s, Unix and Unix-like systems grew in popularity and became the operating system of choice for over 90% of the world's top 500 fastest supercomputers,[22] as BSD and Linux distributions were developed through collaboration by a worldwide network of programmers. In 2000, Apple released Darwin, also a Unix system, which became the core of the Mac OS X operating system, later renamed macOS.[23]
UThe Unix system is composed of several components that were originally packaged together. By including the development environment, libraries, documents and the portable, modifiable source code for all of these components, in addition to the kernel of an operating system, Unix was a self-contained software system. This was one of the key reasons it emerged as an important teaching and learning tool and has had a broad influence. See Impact, below.
The inclusion of these components did not make the system large - the original V7 UNIX distribution, consisting of copies of all of the compiled binaries plus all of the source code and documentation occupied less than 10 MB and arrived on a single nine-track magnetic tape, earning its reputation as a portable system.[25] The printed documentation, typeset from the online sources, was contained in two volumes.
The names and filesystem locations of the Unix components have changed substantially across the history of the system. Nonetheless, the V7 implementation has the canonical early structure:
    Kernel - source code in /usr/sys, composed of several sub-components:
        conf - configuration and machine-dependent parts, including boot code
        dev - device drivers for control of hardware (and some pseudo-hardware)
        sys - operating system "kernel", handling memory management, process scheduling, system calls, etc.
        h - header files, defining key structures within the system and important system-specific invariables
    Development environment - early versions of Unix contained a development environment sufficient to recreate the entire system from source code:
        ed - text editor, for creating source code files
        cc - C language compiler (first appeared in V3 Unix)
        as - machine-language assembler for the machine
        ld - linker, for combining object files
        lib - object-code libraries (installed in /lib or /usr/lib). libc, the system library with C run-time support, was the primary library, but there have always been additional libraries for things such as mathematical functions (libm) or database access. V7 Unix introduced the first version of the modern "Standard I/O" library stdio as part of the system library. Later implementations increased the number of libraries significantly.
        make - build manager (introduced in PWB/UNIX), for effectively automating the build process
        include - header files for software development, defining standard interfaces and system invariants
        Other languages - V7 Unix contained a Fortran-77 compiler, a programmable arbitrary-precision calculator (bc, dc), and the awk scripting language; later versions and implementations contain many other language compilers and toolsets. Early BSD releases included Pascal tools, and many modern Unix systems also include the GNU Compiler Collection as well as or instead of a proprietary compiler system.
        Other tools - including an object-code archive manager (ar), symbol-table lister (nm), compiler-development tools (e.g. lex & yacc), and debugging tools.
    Commands - Unix makes little distinction between commands (user-level programs) for system operation and maintenance (e.g. cron), commands of general utility (e.g. grep), and more general-purpose applications such as the text formatting and typesetting package. Nonetheless, some major categories are:
        sh - the "shell" programmable command-line interpreter, the primary user interface on Unix before window systems appeared, and even afterward (within a "command window").
        Utilities - the core toolkit of the Unix command set, including cp, ls, grep, find and many others. Subcategories include:
            System utilities - administrative tools such as mkfs, fsck, and many others.
            User utilities - environment management tools such as passwd, kill, and others.
        Document formatting - Unix systems were used from the outset for document preparation and typesetting systems, and included many related programs such as nroff, troff, tbl, eqn, refer, and pic. Some modern Unix systems also include packages such as TeX and Ghostscript.
        Graphics - the plot subsystem provided facilities for producing simple vector plots in a device-independent format, with device-specific interpreters to display such files. Modern Unix systems also generally include X11 as a standard windowing system and GUI, and many support OpenGL.
        Communications - early Unix systems contained no inter-system communication, but did include the inter-user communication programs mail and write. V7 introduced the early inter-system communication system UUCP, and systems beginning with BSD release 4.1c included TCP/IP utilities.
    Documentation - Unix was one of the first operating systems to include all of its documentation online in machine-readable form.[26] The documentation included:
        man - manual pages for each command, library component, system call, header file, etc.
        doc - longer documents detailing major subsystems, such as the C language and troffnix-like operating systems are widely used in modern servers, workstations, and mobile devices.[24] 
